<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>生活</title>
    <url>//2023/09/15/%E7%94%9F%E6%B4%BB/</url>
    <content><![CDATA[<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>保持一颗淡泊的心,自己会变的很轻松愉快.<br>坚持一项运动，会一生受益.<br>坚持早睡早起,会一生受益.</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>文化理解</tag>
      </tags>
  </entry>
  <entry>
    <title>c++11新特性</title>
    <url>//2023/01/17/C++/C++%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h1><p>  利用lambda表达式可以编写内嵌的匿名函数，用以替换独立函数或者函数对象，并且使代码更可读。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[]：默认不捕获任何变量；</span><br><span class="line">[=]：默认以值捕获所有变量；</span><br><span class="line">[&amp;]：默认以引用捕获所有变量；</span><br><span class="line">[x]：仅以值捕获x，其它变量不捕获；</span><br><span class="line">[&amp;x]：仅以引用捕获x，其它变量不捕获；</span><br><span class="line">[=, &amp;x]：默认以值捕获所有变量，但是x是例外，通过引用捕获；</span><br><span class="line">[&amp;, x]：默认以引用捕获所有变量，但是x是例外，通过值捕获；</span><br><span class="line">[this]：通过引用捕获当前对象（其实是复制指针）；</span><br><span class="line">[*this]：通过传值方式捕获当前对象；</span><br></pre></td></tr></table></figure>
<h1 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h1><p>C++11 新标准在废弃 auto_ptr 的同时，增添了 unique_ptr、shared_ptr 以及 weak_ptr 这 3 个智能指针来实现堆内存的自动回收。实现原理是通过类达到作用域后的构造和析构来实现的</p>
<h2 id="独占指针"><a href="#独占指针" class="headerlink" title="独占指针"></a>独占指针</h2><p>unique_ptr 是一个独享所有权的智能指针，它提供了严格意义上的所有权，包括：</p>
<p>1、拥有它指向的对象</p>
<p>2、无法进行复制构造，无法进行复制赋值操作。即无法使两个unique_ptr指向同一个对象。但是可以进行移动构造和移动赋值操作</p>
<p>3、保存指向某个对象的指针，当它本身被删除释放的时候，会使用给定的删除器释放它指向的对象</p>
<h2 id="共享指针"><a href="#共享指针" class="headerlink" title="共享指针"></a>共享指针</h2><p>多个 shared_ptr 智能指针可以共同使用同一块堆内存。并且，由于该类型智能指针在实现上采用的是引用计数机制，即便有一个 shared_ptr 指针放弃了堆内存的“使用权”（引用计数减 1），也不会影响其他指向同一堆内存的 shared_ptr 指针（只有引用计数为 0 时，堆内存才会被自动释放）。</p>
<h2 id="弱指针"><a href="#弱指针" class="headerlink" title="弱指针"></a>弱指针</h2><p>weak_ptr是用来解决shared_ptr相互引用时的死锁问题,如果说两个shared_ptr相互引用,那么这两个指针的引用计数永远不可能下降为0,资源永远不会释放。它是对对象的一种弱引用，不会增加对象的引用计数，和shared_ptr之间可以相互转化，shared_ptr可以直接赋值给它，它可以通过调用lock函数来获得shared_ptr。</p>
<h1 id="移动语义"><a href="#移动语义" class="headerlink" title="移动语义"></a>移动语义</h1><p>编译器通过参数的类型实现重载函数决断，对于右值入参，优先调用形参为右值引用的函数。形参为右值引用类型的接口实现方式一般和传统接口（例如拷贝构造、拷贝赋值）实现方式不同，简单来说前者为浅拷贝，后者为深拷贝，即前者为“窃取”后者为副本复制，形如本文开篇那张图片所示（class string）</p>
<h1 id="多线程支持"><a href="#多线程支持" class="headerlink" title="多线程支持"></a>多线程支持</h1><p> 原子类,thread类，条件变量类</p>
<p> <strong>注意</strong> 本文测试代码见<br><a href="https://github.com/dingweiqings/study/tree/master/cpp_study/src/smartpoiner">https://github.com/dingweiqings/study/tree/master/cpp_study/src/smartpoiner</a><br><a href="https://github.com/dingweiqings/study/tree/master/cpp_study/src/thread">https://github.com/dingweiqings/study/tree/master/cpp_study/src/thread</a></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol>
<li>移动语义<br> <a href="https://cloud.tencent.com/developer/article/1385969">https://cloud.tencent.com/developer/article/1385969</a></li>
<li>多线程<br> <a href="https://immortalqx.github.io/2021/12/04/cpp-notes-3/">https://immortalqx.github.io/2021/12/04/cpp-notes-3/</a></li>
<li>C++智能指针<br> <a href="https://www.cnblogs.com/tenosdoit/p/3456704.html">https://www.cnblogs.com/tenosdoit/p/3456704.html</a></li>
<li>lambda函数<br> <a href="https://www.jianshu.com/p/d686ad9de817">https://www.jianshu.com/p/d686ad9de817</a></li>
</ol>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>ConcurrentHashMap</title>
    <url>//2022/11/22/java/ConcurrentHashMap/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>HashMap</title>
    <url>//2022/11/22/java/HashMap/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>hashmap 哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>TransferQueue</title>
    <url>//2022/11/22/java/TransferQueue/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>非阻塞队列 java queue</tag>
      </tags>
  </entry>
  <entry>
    <title>TreeMap</title>
    <url>//2022/11/22/java/TreeMap/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>红黑树 平衡搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm-gc</title>
    <url>//2022/11/22/java/jvm-gc/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>jvm gc</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池</title>
    <url>//2022/11/22/java/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java 线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>LSM树</title>
    <url>//2022/11/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LSM%E6%A0%91/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>LSM</tag>
      </tags>
  </entry>
  <entry>
    <title>算法/crc学习</title>
    <url>//2022/11/21/%E7%AE%97%E6%B3%95/crc%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h2><h2 id="磁盘冗余阵列"><a href="#磁盘冗余阵列" class="headerlink" title="磁盘冗余阵列"></a>磁盘冗余阵列</h2><h2 id="数学原理"><a href="#数学原理" class="headerlink" title="数学原理"></a>数学原理</h2><h3 id="多项式代数和多项式除法"><a href="#多项式代数和多项式除法" class="headerlink" title="多项式代数和多项式除法"></a>多项式代数和多项式除法</h3><p>高等代数中的多项式代数知识</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">M/N=Q...R </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里容易得到，R会比N幂次要低，就和整数除法m&#x2F;n&#x3D;q..r ，0&lt;&#x3D;r&lt;n 一样</p>
<ol>
<li>除法规则-竖式除法<br>每次消去余数最高项，直到余数最高次项小于除数<br><a href="../../assets/divide.png">!除法</a></li>
</ol>
<p>大牛在1961年发布的论文 <a href="https://en.wikipedia.org/wiki/W._Wesley_Peterson">https://en.wikipedia.org/wiki/W._Wesley_Peterson</a></p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol>
<li><p>朴素的竖式多项式除法的翻译<br>这里主要思路是用商消去最高位，然后在输入的数组上减去商*生成多项式，因此余数也是保存在输入的被除多项式位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int divide( double num[], int nlen,</span><br><span class="line">            double den[], int dlen,</span><br><span class="line">            double quotient[], int *qlen )</span><br><span class="line">&#123;</span><br><span class="line">    int n, d, q;</span><br><span class="line">    // The lengths are one more than the last index; decrement them</span><br><span class="line">    // here so the call is less confusing</span><br><span class="line">    nlen--;</span><br><span class="line">    dlen--;</span><br><span class="line">    q = 0;</span><br><span class="line">    // when n &gt; dlen, the result is no longer a polynomial</span><br><span class="line">    // (e.g. trying to divide x by x^2</span><br><span class="line">    for ( n = nlen; n &gt;= dlen; n-- )</span><br><span class="line">    &#123;</span><br><span class="line">      // First, divide the nth element of numerator with the last element</span><br><span class="line">      // of the denominator</span><br><span class="line">      quotient[ n - dlen ] = num[ n ] / den[ dlen ];</span><br><span class="line">      q++;</span><br><span class="line">      // Now, multiply each element of the denominator by each</span><br><span class="line">      // corresponding element of the numerator and subtract the</span><br><span class="line">      // result</span><br><span class="line">      for ( d = dlen; d &gt;= 0; d-- )</span><br><span class="line">      &#123;</span><br><span class="line">        num[ n - ( dlen - d ) ] -= den[ d ] * quotient[ n - dlen ];</span><br><span class="line">        //采用模2除法，需要修改成这行代码</span><br><span class="line">        num[ n - ( denlen - d ) ] = fabs( num[ n - ( denlen - d ) ] );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *qlen = q;</span><br><span class="line"></span><br><span class="line">    return ( nlen - *qlen + 1 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>使用异或来计算<br>这里比较难理解，让我想了很久，还是基于竖式除法的思路，从竖式除法我们可以发现，32位的生成多项式最高位可以不存储，因为每次都是消去最高项；可以用一个32位int来保存余数，长度小于32位的二进制序列余数就是它自己，因此需要在右端补上32位；从竖式除法中我们可以发现，做减法的次数等于被除数长度-除数长度+1；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned long int compute_crc( unsigned long input,</span><br><span class="line">                               int len,</span><br><span class="line">                               unsigned long divisor )</span><br><span class="line">&#123;</span><br><span class="line">  //要做被除数长度-除数长度+1=24+32-33+1=24  </span><br><span class="line">  while ( len-- )</span><br><span class="line">  &#123;</span><br><span class="line">    //如果最高位是1，那么这位是要被消去，余数等于剩下的和除数异或；如果最高位是0，我们发现最高位死0，实际上是</span><br><span class="line">    //商为0，和全0异或等于它自己，等效于直接左移</span><br><span class="line">    input = ( input &amp; 0x80000000 ) ? divisor ^ ( input &lt;&lt; 1 ) : ( input &lt;&lt; 1 );</span><br><span class="line">  &#125;</span><br><span class="line">  //余数存储在32位，这里实际上等价于竖式多项式的低32位；因为运算过程中，余数始终保存在input位置</span><br><span class="line">  return input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">  unsigned long int crc32_divisor = 0x04C11DB7;</span><br><span class="line">  //下面的input按ABC实际上的值字节做了反转，多项式是低字节在低位，为了位对齐</span><br><span class="line">  //   0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, // C</span><br><span class="line">  //   0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, // B</span><br><span class="line">   //  0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0  // A</span><br><span class="line">  unsigned long int input = 0x8242C200; // ABC; backwards &amp; left aligned</span><br><span class="line"></span><br><span class="line">  printf( &quot;%lx\n&quot;, compute_crc( input, 24, crc32_divisor ); // 5A5B433A</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="常见组件关于crc的实现"><a href="#常见组件关于crc的实现" class="headerlink" title="常见组件关于crc的实现"></a>常见组件关于crc的实现</h2><ol>
<li>mariadb中用的是查表，或者使用cpu的sse来计算</li>
<li>zlib</li>
</ol>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol>
<li>这是大牛的ppt讲解，<a href="https://pdfs.semanticscholar.org/44c1/4780d58015f8411fb85efa58a4aa3747a6ad.pdf">https://pdfs.semanticscholar.org/44c1/4780d58015f8411fb85efa58a4aa3747a6ad.pdf</a></li>
<li>论文原版<a href="https://apt.cs.manchester.ac.uk/ftp/pub/apt/papers/Peterson-Brown_61.pdf">https://apt.cs.manchester.ac.uk/ftp/pub/apt/papers/Peterson-Brown_61.pdf</a></li>
<li><a href="https://www.shuxuele.com/algebra/polynomials-division-long.html">https://www.shuxuele.com/algebra/polynomials-division-long.html</a></li>
<li>模2除法<a href="https://blog.csdn.net/weixin_39450145/article/details/83987836">https://blog.csdn.net/weixin_39450145/article/details/83987836</a></li>
<li>gcc中crc32的实现</li>
<li>mysql中crc32的实现</li>
<li>crc32 校验和 <a href="https://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art008">https://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art008</a></li>
<li>常用的除数多项式</li>
<li>github doc <a href="https://github.com/komrad36/CRC">https://github.com/komrad36/CRC</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>素数</title>
    <url>//2022/11/22/%E7%AE%97%E6%B3%95/%E7%B4%A0%E6%95%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>线性同余</title>
    <url>//2022/11/22/%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>面向对象</title>
    <url>//2023/01/17/C++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="面向对象的软件设计方式"><a href="#面向对象的软件设计方式" class="headerlink" title="面向对象的软件设计方式"></a>面向对象的软件设计方式</h1><p>大型软件工程中是根据需求中的实体来建模的,对象往往代表了这些实体。具有这些实体的属性，并以提供和其他对象交互的函数。有以下的优势：</p>
<ol>
<li>逻辑容易设计和理解</li>
<li>可以提高代码功能逻辑的复用</li>
<li>代码上高内聚低耦合，面向接口依赖</li>
<li>提供了运行时的动态绑定</li>
</ol>
<h1 id="面向对象的基本概念和模式"><a href="#面向对象的基本概念和模式" class="headerlink" title="面向对象的基本概念和模式"></a>面向对象的基本概念和模式</h1><p>类：类是描述一类对象的特征和提供特定功能的代码实体，同时也是实例的模板，实例以类为模板<br>实例: 具体的一个对象，具有实例变量，是类的一个具体化。<br>类有静态属性和动态属性之分，静态属性是所有实例共享的，动态属性是每个实例特有的，又称实例属性</p>
<h2 id="举个例子，以人为例"><a href="#举个例子，以人为例" class="headerlink" title="举个例子，以人为例"></a>举个例子，以人为例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usingnamespace std::string;</span><br><span class="line">class Person&#123;</span><br><span class="line">    private:</span><br><span class="line">      int age;</span><br><span class="line">      string name;</span><br><span class="line">      string work;</span><br><span class="line">    public:  </span><br><span class="line">      static string motherland;</span><br><span class="line">    private:</span><br><span class="line">      string doWork()&#123;</span><br><span class="line">        std::cout&gt;&gt;&quot;我在做xxxjob&quot;;</span><br><span class="line">      &#125;  </span><br><span class="line">    public:</span><br><span class="line">      string buy(string car)&#123;</span><br><span class="line">        std::cout&gt;&gt;&quot;买了&quot;&gt;&gt;car;</span><br><span class="line">      &#125;  </span><br><span class="line">&#125;;</span><br><span class="line">Person::motherland = &quot;中国&quot;;</span><br><span class="line">Person zhangsan = Person(10,&quot;张三&quot;,&quot;学生&quot;);</span><br><span class="line">Person lisi = Person(25,&quot;李四&quot;,&quot;程序员&quot;);</span><br></pre></td></tr></table></figure>
<p>来验证前面的理论，类是实体的建模，成员是对实体属性的抽象。两个实例zhangsan和lisi是类Person的具体化，动态属性的值各不相同。但都有一个共享的静态变量。类有特定功能的函数或者说有特定行为的函数，这些函数用来和其他对象交互.</p>
<h2 id="进一步的概念"><a href="#进一步的概念" class="headerlink" title="进一步的概念"></a>进一步的概念</h2><p>经过上面的例子，就可以归纳出在代码实体上的概念：</p>
<ul>
<li>成员变量,类的属性</li>
<li>方法，类的特定行为的函数</li>
<li>成员变量和方法的权限</li>
<li>普通函数，和c中函数类似，不在类的代码块内部</li>
<li>构造函数和析构函数</li>
<li>继承，对象的树级关系</li>
<li>虚函数，子类可以重写的方法，编译器用virtual关键字来识别</li>
<li>纯虚函数，用来定义接口，带有纯虚函数的不能实例化,编译器用virtual关键字+方法体&#x3D;0来定义</li>
<li>抽象基类,用做接口定义,包含纯虚函数的类是抽象基类，不能实例化，只能被继承，实例化成他的子类</li>
</ul>
<h3 id="下面介绍构造函数和析构函数"><a href="#下面介绍构造函数和析构函数" class="headerlink" title="下面介绍构造函数和析构函数"></a>下面介绍构造函数和析构函数</h3><h4 id="默认构造函数和无参构造函数"><a href="#默认构造函数和无参构造函数" class="headerlink" title="默认构造函数和无参构造函数"></a>默认构造函数和无参构造函数</h4><p>默认构造函数是创建对象时默认调用的,如果没有声明，则编译器会按照一定条件来默认创建一个无参的构造函数，当然自己也可以声明无参的。自己声明了，编译器则不会再创建。<strong>编译器创建的构造函数并不会赋初始值</strong>。编译器的创建策略主要是</p>
<ol>
<li>有非基本类型的成员(自定义类型或者string类型),并且这些成员本身有默认构造函数。这种情况是如果只有基本类型在拷贝对象时，直接拷贝内存块即可</li>
<li>有虚函数和虚继承，这种情况是需要虚函数表</li>
<li>继承的父类有默认构造函数<br>这里推荐一个网站，可以用来查看编译后的汇编代码。<a href="https://godbolt.org/">https://godbolt.org/</a><br>引用1中的结论我是验证过的，在gcc13.2上。记住要加-O0(减号大o后面跟个优化等级)才可以得到结果</li>
</ol>
<ul>
<li>如果自己只定义了默认构造函数，编译器是否会生成拷贝&#x2F;赋值&#x2F;移动构造函数？<br>如果程序中有用到对象拷贝赋值则会生成并调用默认的构造函数，没有用到则不会生成</li>
<li>如果只定义了拷贝构造函数，还会生成默认构造函数吗？<br>这种不会，编译会报错</li>
</ul>
<h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><p>在释放对象时，编译调用的函数。如果是用来继承的类，必须声明为虚函数</p>
<h4 id="父子类的构造函数和析构函数顺序"><a href="#父子类的构造函数和析构函数顺序" class="headerlink" title="父子类的构造函数和析构函数顺序"></a>父子类的构造函数和析构函数顺序</h4><p>构造：先基类，再子类<br>析构：先子类，再基类<br>对上面继承时析构函数需要声明为虚函数做些说明，因为虚函数再调用时才会根据运行时状态，调用子类对象的析构函数。编译器又会自动释放基类，从而可以完整的释放这条继承链上的所有对象。不是虚函数的话，会直接调用基类的析构函数，发生<strong>内存泄露</strong></p>
<h4 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h4><p>形如下面的code</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//调用拷贝构造生成对象</span><br><span class="line">A a ;</span><br><span class="line">A b = A(a);</span><br><span class="line">//函数返回值</span><br><span class="line">A doSomeWork()&#123;</span><br><span class="line">  A work;</span><br><span class="line">  ...</span><br><span class="line">  return work;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//函数参数</span><br><span class="line">void doSomeWork(A other)&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拷贝构造是一定会生成新对象的，可能是临时的，过一会被删除。这也解释了为啥函数参数推荐使用引用或者指针，避免了重复创建临时对象。<br>关于函数的2种情况实际上可以统一，从程序的内存布局来理解，都是在调用者和被调用者栈帧之间拷贝对象，因为栈帧内的内存会用完就被释放。</p>
<h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>形如下面的code</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A a;</span><br><span class="line">B b;</span><br><span class="line">C c;</span><br><span class="line">c=b=a;</span><br></pre></td></tr></table></figure>
<p>赋值号左右两边都是已经存在的对象，不会产生新对象</p>
<h4 id="移动构造函数"><a href="#移动构造函数" class="headerlink" title="移动构造函数"></a>移动构造函数</h4><p>这个函数还是为了减少内存拷贝带来的特性。在编程中，有些类中会包含大的成员数组，或者大的成员变量。如果在拷贝赋值时可以直接将这个大的成员<br>直接移动给目标对象，可以减少很多拷贝开销。语义上理解很像是移动或者所有权转移。那怎么去实现他呢？需要一种标志来表示程序员啥时候可以使用移动语义，现在的引用是无法转移的。于是，那些C++大牛们提出了一个另外一种引用，当参数中以这种形式的引用出现时，编译器就会按照移动语义来实现。<br>一般文献中会称为右值引用,就可以理解为一种引用，不过是用来标志支持移动语义的。左值和右值可以相互转换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A (A&amp;&amp; other)&#123;</span><br><span class="line">  array  = other.array; //移动</span><br><span class="line">  other.array = nullptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="移动运算符"><a href="#移动运算符" class="headerlink" title="移动运算符"></a>移动运算符</h4><p>和上面类似的，运算符两边都是已经存在的对象，并且是移动语义</p>
<p><strong>注意</strong> 拷贝构造&#x2F;拷贝赋值与移动构造和移动赋值如果自己提供了其中一个，则编译不会提供另一个。因为只要有一种就都可以编译通过。可通过&#x3D;default来声明</p>
<p>前面的测试代码见<a href="https://github.com/dingweiqings/study/tree/master/cpp_study/src/construct">https://github.com/dingweiqings/study/tree/master/cpp_study/src/construct</a></p>
<h3 id="汇编验证"><a href="#汇编验证" class="headerlink" title="汇编验证"></a>汇编验证</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">	Person()&#123;&#125;</span><br><span class="line">	Person(const Person&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; &quot;Copy Constructor&quot; &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Person&amp; operator=(const Person&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; &quot;Assign&quot; &lt;&lt; endl;</span><br><span class="line">		return *this;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">	int age;</span><br><span class="line">	string name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void f(Person p)</span><br><span class="line">&#123;</span><br><span class="line">	return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person f1()</span><br><span class="line">&#123;</span><br><span class="line">	Person p;</span><br><span class="line">	return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Person p;</span><br><span class="line">	Person p1 = p;    // 1</span><br><span class="line">	Person p2;</span><br><span class="line">	p2 = p;           // 2</span><br><span class="line">	f(p2);            // 3</span><br><span class="line"></span><br><span class="line">	p2 = f1();        // 4</span><br><span class="line"></span><br><span class="line">	Person p3 = f1(); // 5</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将上面代码拷贝到<a href="https://godbolt.org/">https://godbolt.org/</a><br><img src="/img/copy-construct.png" alt="结果"></p>
<h1 id="C-的对象模型"><a href="#C-的对象模型" class="headerlink" title="C++的对象模型"></a>C++的对象模型</h1><p>面向对象的语言都需要解决下面几个问题:</p>
<ol>
<li>对象的成员数据存储和访问</li>
<li>对象的成员函数存储和访问</li>
<li>对象的静态成员和方法的存储的访问</li>
<li>在有继承的情况下，前面1，2，3怎么处理</li>
<li>对于多态的运行时绑定策略</li>
<li>对象的创建和释放</li>
</ol>
<h2 id="几种可能的实现"><a href="#几种可能的实现" class="headerlink" title="几种可能的实现"></a>几种可能的实现</h2><ul>
<li>简单对象模型<br>暴力一点，对每个实例，都把成员数据和成员函数都都拷贝一份，这样不就都可以访问到了吗？静态成员还是要单独存储。<br>继承把父类的成员数据和函数都拷贝一份，因为每个实例有自己独立的拷贝，所以多态是自然支持的</li>
<li>基于表格的模型<br>第一种的内存消耗太大，虽然访问都是固定时间.于是，我们产生了第二种想法，可以将成员函数和成员数据分开来存储。把成员函数放入一个表格之中，这样成员函数就可以被所有实例共享。成员数据还是随每个实例存储，每个成员额外增加一个指向成员函数表格的指针。想法是根据成员函数有共享性，成员数据是独立性。这里先记住2个名字，函数表指针和函数表</li>
</ul>
<h2 id="C-的成员变量存储和访问"><a href="#C-的成员变量存储和访问" class="headerlink" title="C++的成员变量存储和访问"></a>C++的成员变量存储和访问</h2><h3 id="静态变量和静态函数"><a href="#静态变量和静态函数" class="headerlink" title="静态变量和静态函数"></a>静态变量和静态函数</h3><p>静态变量是转变成global变量，但会由编译器控制可见性。就类似于普通定义的全局变量.所以访问也是和普通变量类似,通过地址直接访问</p>
<h3 id="无继承的情况"><a href="#无继承的情况" class="headerlink" title="无继承的情况"></a>无继承的情况</h3><p>类似于c结构体的存储,按照声明变量的顺序和大小，从低地址到高地址存储。当然中间可能会由于体系结构要求的对齐。这里C++并未规定，变量必须连续存储，只要按照变量声明的顺序即可。也就是说，可以在成员变量缝隙间插入特定的内容.详细可见《深入探索对象模型》的第3章3.2节</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">  public:</span><br><span class="line">  int a;</span><br><span class="line">  int b;</span><br><span class="line">  virtual void function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先忽略虚函数表的内容，后面会再介绍<br><img src="/img/object-data.png" alt="单一对象"></p>
<h3 id="单一继承的情况"><a href="#单一继承的情况" class="headerlink" title="单一继承的情况"></a>单一继承的情况</h3><p>子类会将父类实例成员拷贝一份.类似于包馅饼。因为这样才可以完整的实现多态，否则向上转型取字段就不对了。<br><img src="/img/object-single.png" alt="单一继承"></p>
<h3 id="多重继承-继承树上无重复"><a href="#多重继承-继承树上无重复" class="headerlink" title="多重继承(继承树上无重复)"></a>多重继承(继承树上无重复)</h3><p>就包多次馅饼,从小到大包.<br>所以此时,如果有重名变量和方法，需要明确指定基类.比如:<br>两个基类中有重名的方法和变量,SetWeight,则需要用完全限定名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SleepSofa a;</span><br><span class="line">a.Bed::SetWeight(1);</span><br><span class="line">a.Sofa::SetWeight(2);</span><br></pre></td></tr></table></figure>
<p><img src="/img/object-multi.png" alt="多重继承"></p>
<h3 id="多重继承-继承树上有重复"><a href="#多重继承-继承树上有重复" class="headerlink" title="多重继承(继承树上有重复)"></a>多重继承(继承树上有重复)</h3><p>这种情况，如果还是包馅饼,对于继承树上重复出现会被多个子节点包进去,造成内存的浪费，也会导致访问和修改的歧义。C++大佬们又想了个办法，(后面你会发现和虚函数的处理策略是类似的).增加了共享继承的机制，用现有的关键字virtual，语义同虚函数相同。在类对象中增加一个虚基类指针，用以指向虚基类在实例中的偏移量。<br>虚基类指针在内存中放在哪里呢？有2种放置策略</p>
<ol>
<li>将所有虚继承的父类都搞一个指针放在实例中,指向基类在实例中的内存位置，以用来访问成员。这种每个实例都有额外的指针存储，在基类很多的情况下，开销较大</li>
<li>多个虚继承的父类就搞一个虚继承表(和虚函数表很像),指代基类在实例中的偏移量。由于类的布局是固定的，所以只需要准备一份这个表即可。(根据候捷大佬《深入探索C++模型》原文中说微软编译器是这样做的)</li>
<li>和虚函数表放在一起，gcc和clang是这样做的，下面会详细分析gcc的虚函数表</li>
</ol>
<p><img src="/img/object-multi-offset.png" alt="共享继承"></p>
<h2 id="C-的成员函数存储和调用"><a href="#C-的成员函数存储和调用" class="headerlink" title="C++的成员函数存储和调用"></a>C++的成员函数存储和调用</h2><h3 id="静态函数"><a href="#静态函数" class="headerlink" title="静态函数"></a>静态函数</h3><p>静态函数就是只能访问静态变量的函数，除此之外函数的存储和调用和其他成员函数无区别，静态函数不能是虚函数，编译期就可以得到地址.</p>
<h3 id="继承树中所有类都无虚函数"><a href="#继承树中所有类都无虚函数" class="headerlink" title="继承树中所有类都无虚函数"></a>继承树中所有类都无虚函数</h3><p>这种和普通非成员函数调用无区别，编译期就可以确定</p>
<h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><h4 id="无继承"><a href="#无继承" class="headerlink" title="无继承"></a>无继承</h4><p>编译器会创建一个虚函数表,在实例中增加一个隐藏成员,这个成员指向虚函数表的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Base &#123;</span><br><span class="line">   Base() = default;</span><br><span class="line">   virtual ~Base() = default;</span><br><span class="line">   </span><br><span class="line">   void FuncA() &#123;&#125;</span><br><span class="line"></span><br><span class="line">   virtual void FuncB() &#123;</span><br><span class="line">       printf(&quot;FuncB\n&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   int a;</span><br><span class="line">   int b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">   Base a;</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/function-single.png" alt="无继承"><br><strong>注意</strong> 详细介绍一下虚函数表中的概念，</p>
<ol>
<li>整个虚函数表,是一个数组,每一项8字节（64位架构下）固定长度,所以可以按照偏移量来索引</li>
<li>function pointer 存储虚函数的区域,每一项都是一个内存地址,指向函数的入口,按照源码顺序来排列</li>
<li>virtual base offset 虚函数表中有些项存储的是虚基类的偏移量</li>
<li>offset to top 这种项记录的是和当前实际类型的开头的偏移量<br>下面给出一个简单vtable例子,有个简单的印象<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vtable for A</span><br><span class="line">A::vtable for A: 3 entries</span><br><span class="line">0     (int (*)(...))0</span><br><span class="line">8     (int (*)(...))(&amp; typeinfo for A)</span><br><span class="line">16    (int (*)(...))A::af</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="单继承的情况-这种很重要-平常用的最多-而且是理解后续模型的基础"><a href="#单继承的情况-这种很重要-平常用的最多-而且是理解后续模型的基础" class="headerlink" title="单继承的情况(这种很重要,平常用的最多,而且是理解后续模型的基础)"></a>单继承的情况(这种很重要,平常用的最多,而且是理解后续模型的基础)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Base &#123;</span><br><span class="line">   Base() = default;</span><br><span class="line">   virtual ~Base() = default;</span><br><span class="line">   </span><br><span class="line">   void FuncA() &#123;&#125;</span><br><span class="line"></span><br><span class="line">   virtual void FuncB() &#123;</span><br><span class="line">       printf(&quot;Base FuncB\n&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   int a;</span><br><span class="line">   int b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Derive : public Base&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">   Base a;</span><br><span class="line">   Derive d;</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/function-single-no.png" alt="无覆盖"><br><img src="/img/function-single-override.png" alt="有覆盖"></p>
<p><strong>注意</strong> 这里可以发现,如果子类有覆盖父类的方法,虚函数表中就填子类的,如果没有就把父类的拷贝过来.每个类都有自己的虚函数表,并不是通过共享虚函数表来实现继承的.</p>
<h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><p>这种是每个继承树上的每一个类在实例内存中指向自己类的function pointer,这样在调用基类虚函数时，会查找到实际类型的函数地址,从而实现多态<br>下面会详细介绍如果根据虚函数表查找实际类型的函数地址<br><img src="/img/object-multi.png" alt="多重继承"></p>
<h4 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h4><p>在继承树上有重复类的时候,根据前面对象数据成员内存布局,需要添加一个基类的偏移量来表示每个基类在实例中的内存位置.gcc是把基类指针放在虚函数表中,下面会详细介绍虚函数表</p>
<p><img src="/img/object-multi-offset.png" alt="虚继承"></p>
<p><img src="/img/object-multi-offset2.png" alt="虚继承"></p>
<h1 id="虚函数表"><a href="#虚函数表" class="headerlink" title="虚函数表"></a>虚函数表</h1><p>这些内容比较复杂,另起一篇文章<br><a href="/2023/09/25/C++/gcc%E7%9A%84%E8%99%9A%E5%87%BD%E6%95%B0%E8%A1%A8">gcc的虚函数表</a><br><a href="https://github.com/bingseclab/VirtAnalyzer/blob/master/README.md">https://github.com/bingseclab/VirtAnalyzer/blob/master/README.md</a></p>
<h1 id="gcc查看虚函数表"><a href="#gcc查看虚函数表" class="headerlink" title="gcc查看虚函数表"></a>gcc查看虚函数表</h1><p>内容见<a href="/2023/09/25/C++/gcc%E7%9A%84%E8%99%9A%E5%87%BD%E6%95%B0%E8%A1%A8">gcc的虚函数表</a><br><a href="https://github.com/bingseclab/VirtAnalyzer/blob/master/README.md">https://github.com/bingseclab/VirtAnalyzer/blob/master/README.md</a></p>
<h1 id="gdb打印对象内存布局"><a href="#gdb打印对象内存布局" class="headerlink" title="gdb打印对象内存布局"></a>gdb打印对象内存布局</h1><h2 id="gdb命令"><a href="#gdb命令" class="headerlink" title="gdb命令"></a>gdb命令</h2><ol>
<li><p>每行打印一个结构体成员<br>可以执行set print pretty on命令，这样每行只会显示结构体的一名成员，而且还会根据成员的定义层次进行缩进</p>
</li>
<li><p>按照派生类打印对象<br>set print object on</p>
</li>
<li><p>查看虚函数表<br>通过如下设置：set print vtbl on</p>
</li>
</ol>
<p>之后执行如下命令查看虚函数表：info vtbl 对象或者info vtbl 指针或引用所指向或绑定的对象</p>
<ol start="4">
<li>c++名称转换<br>GNU提供的从name mangling后的名字来找原函数的方法，c++filt工具,执行c++filt _ZTV1A<br>在线反修饰名称的网站<a href="http://demangler.com/">http://demangler.com/</a></li>
</ol>
<p><img src="/img/object-in-memory.png" alt="对象布局"></p>
<p><img src="/img/object-vtbl.png" alt="对象布局"></p>
<h1 id="汇编查看实例函数调用"><a href="#汇编查看实例函数调用" class="headerlink" title="汇编查看实例函数调用"></a>汇编查看实例函数调用</h1><p>汇编中会额外增加一个this指针,一般是放在rdi寄存器中</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>MSVC ABI和Itanium ABI(gcc和clang遵循这个标准)<br>C++ Itanium ABI 主要分为四大板块：</p>
<p>指导程序中的各种数据结构如何正确而一致地在内存中布局（Data Layout）；<br>指导在二进制层面如何调用其他函数（调用约定，Calling Convention）；<br>为 C++ 的异常处理机制提供正确的实现（Exception Handling）；<br>定义输入到链接器的对象文件的格式（Linkage &amp; Object Files）</p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol>
<li><a href="https://blog.csdn.net/qiuguolu1108/article/details/114797246">gcc生成默认构造器的策略</a></li>
<li><a href="https://blog.csdn.net/shltsh/article/details/45959271">gcc生成拷贝构造和默认构造的策略</a></li>
<li>深入探索C++对象模型-候捷</li>
<li><a href="https://www.cnblogs.com/qg-whz/p/4909359.html">图解对象内存模型</a></li>
<li><a href="https://gcc.gnu.org/onlinedocs/gcc-13.2.0/gcc/Developer-Options.html">gcc deveploper option 打印对象vtable内存布局</a></li>
<li><a href="https://github.com/v4if/blog/issues/15">gdb 打印内存布局</a></li>
<li><a href="https://itanium-cxx-abi.github.io/cxx-abi/abi.html">Itanuim ABI</a></li>
</ol>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>运算符重载</title>
    <url>//2023/09/19/C++/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="类之间的运算"><a href="#类之间的运算" class="headerlink" title="类之间的运算"></a>类之间的运算</h1><p>这里可以利用抽象代数的观点来看待这种处理,把运算扩充到任意的集合上,而不是只在数集上.运算可以对应于某个集合下元素之间的关系,可以在运算的世界中表达逻辑.在软件工程观点来看,让代码变得简洁</p>
<h1 id="C-运算符重载：用同一个运算符完成不同的运算功能。"><a href="#C-运算符重载：用同一个运算符完成不同的运算功能。" class="headerlink" title="C++运算符重载：用同一个运算符完成不同的运算功能。"></a>C++运算符重载：用同一个运算符完成不同的运算功能。</h1><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><p> C++运算符重载的相关规定如下：<br> 1.不能改变运算符的优先级。<br> 2.不能改变运算符的结合性。<br> 3.默认参数不能和重载的运算符一起使用，也就是说，在设计运算符重载成员函数时不能使用默认函数。<br> 4.不能改变运算符的操作数的个数。<br> 5.不能创建新的运算符，只有已有运算符可以被重载<br> 6.运算符作用于C++内部提供的数据类型时，原来含义保持不变<br> 7. 重载的运算符至少有一个操作数是自定义类型</p>
<h3 id="C-中可被重载的运算符："><a href="#C-中可被重载的运算符：" class="headerlink" title="C++中可被重载的运算符："></a>C++中可被重载的运算符：</h3><p><img src="/img/override.png" alt="可被重载"></p>
<h3 id="不可被重载的运算符"><a href="#不可被重载的运算符" class="headerlink" title="不可被重载的运算符"></a>不可被重载的运算符</h3><ul>
<li>sizeof</li>
<li>.: 成员运算符</li>
<li>.* 成员指针运算符</li>
<li>:: 作用域运算符</li>
<li>?:: 条件运算符</li>
<li>typeid: 运行时信息运算符</li>
<li>const_cast&#x2F;dynamic_cast&#x2F;static_cast&#x2F;reinterpret_cast 类型转换运算符<br>上面这些并不是表达元素之间的运算关系,而是取成员和类型转换,这些由类的元数据决定,当一个类确定之后,这些的运算结果就应该是确定的</li>
</ul>
<h3 id="只可通过成员函数重载"><a href="#只可通过成员函数重载" class="headerlink" title="只可通过成员函数重载"></a>只可通过成员函数重载</h3><ul>
<li>&#x3D; 赋值</li>
<li>() 函数调用</li>
<li>[] 下表</li>
<li>-&gt; 通过指针访问类成员</li>
</ul>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数类型   	operator	重载运算符（形参表）</span><br><span class="line">&#123;</span><br><span class="line">	函数体；</span><br><span class="line">&#125;</span><br><span class="line">//非成员函数</span><br><span class="line">friend	函数类型	operator	重载运算符（形参表）</span><br><span class="line">&#123;</span><br><span class="line">	函数体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>实际上都是编译器做了特定表达式&#x2F;类型下运算符-&gt;函数的转换.最终都被编译器转换成函数</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="重载自增自减运算符"><a href="#重载自增自减运算符" class="headerlink" title="重载自增自减运算符"></a>重载自增自减运算符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using	namespace	std;</span><br><span class="line">class MyClass2</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">public:</span><br><span class="line">	MyClass2(int i)&#123; n = i; &#125;</span><br><span class="line">	int operator ++()&#123; n++; return n; &#125;</span><br><span class="line">	int operator ++(int)&#123; n += 2; return n; &#125;</span><br><span class="line">	void display()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; &quot;n=&quot; &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	MyClass2 A(5), B(5);</span><br><span class="line">	A++;</span><br><span class="line">	++B;</span><br><span class="line">	A.display();</span><br><span class="line">	B.display();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="重载双目运算符"><a href="#重载双目运算符" class="headerlink" title="重载双目运算符"></a>重载双目运算符</h2><h3 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h3><p>假设有一个类A，对于双目运算符op，如果重载运算符op使之能够实现表达式“obj1 op	obj2”,其中obj1和obj2均为A类的对象。<br>若把op重载为A类的成员函数，该函数只有一个形参，形参的类型是obj2所属的类型。是把op前面的看成对象,op右边的看出函数参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">obj1.operator op(obj2)</span><br></pre></td></tr></table></figure>
<h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h3><p>假设有一个类A，对于双目运算符op，如果重载运算符op使之能够实现表达式“obj1 op	obj2”,其中obj1和obj2均为A类的对象。<br> 若把op重载为A类的友元函数，该函数有两个形参，经过重载之后，表达式“obj1	op	obj2”解释为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">obj1 op(obj1,obj2)</span><br></pre></td></tr></table></figure>

<h2 id="重载赋值运算符"><a href="#重载赋值运算符" class="headerlink" title="重载赋值运算符"></a>重载赋值运算符</h2><p>哈哈,这里不就是我们熟悉的拷贝构造函数和赋值运算符.找到理论和实际的结合点了</p>
<h2 id="重载下标运算符"><a href="#重载下标运算符" class="headerlink" title="重载下标运算符"></a>重载下标运算符</h2><p>下标运算符“[ ]”通常用于获取数组的某个元素，重载下标运算符可以实现数组下标的越界检测等。下标运算符重载只能作为类的成员函数，不能作为类的友元函数。</p>
<h2 id="重载new-delete换运算符"><a href="#重载new-delete换运算符" class="headerlink" title="重载new delete换运算符"></a>重载new delete换运算符</h2><p>new和delete只能被重载为类的成员函数，不能重载为友元。而且，无论是否使用关键字static进行修饰，重载了的new和delete均为类的静态成员函数。<br> 运算符new重载的一般格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void	*类名：：operator	new(size_t,参数表)；</span><br><span class="line">void* operator new(size_t size,int x,int y,int z)</span><br><span class="line">&#123;……</span><br><span class="line">&#125;</span><br><span class="line">void *类名“::operator delete(void*,参数表);</span><br></pre></td></tr></table></figure>
<p>使用如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x*pX=new(1,2,3) X;</span><br></pre></td></tr></table></figure>
<h2 id="重载类型转换运算符"><a href="#重载类型转换运算符" class="headerlink" title="重载类型转换运算符"></a>重载类型转换运算符</h2><p>这个特性是和拷贝构造函数对应的,比如有一个类Stock可以根据传入的double来构造,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Stock&#123;</span><br><span class="line">    public:</span><br><span class="line">     Stock(double t)&#123;</span><br><span class="line">        value = t;</span><br><span class="line">     &#125;</span><br><span class="line">    int value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么如果要将Stock转出double呢,就要用到下面的类型转换运算符.这两个函数是一一对应的<br>格式:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">operator 类型名（）</span><br><span class="line">&#123;</span><br><span class="line">	函数体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="重载函数调用运算符"><a href="#重载函数调用运算符" class="headerlink" title="重载函数调用运算符"></a>重载函数调用运算符</h2><p>函数调用运算符“（）”只能说明成类的非静态成员函数，该函数具有以下的一般格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数类型 类名：：operator()(参数表)</span><br></pre></td></tr></table></figure>
<h2 id="重载移位运算符"><a href="#重载移位运算符" class="headerlink" title="重载移位运算符"></a>重载移位运算符</h2><p>按照输入流和输出流的概念,如果能有一种运算符可以让对象直接和输入流输出流交互,就不用再写printf(“%s”)这种冗余代码了,还要记类型的format.<br>于是我们想,把移位看出向输入流和输出流传递数据,正好有左移和右移.开口大的流向开口小的.于是会有下面的代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出流 &lt;&lt;  obj</span><br><span class="line">输入流 &gt;&gt;  obj </span><br></pre></td></tr></table></figure>
<p>幸运的是,C++大佬们设计出了这样的特性. 根据友元函数运算符重载的特点,对于双目操作符是将 obj1 op opj2转换成 op(obj1,obj2);<br>并且这样还可以支持任意一种自定义类型却不用修改std库中输入流和输出流的代码.这实际上也是友元函数重载解决的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Person &#123;</span><br><span class="line">	friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">	Person(int a, int b)</span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;m_A = a;</span><br><span class="line">		this-&gt;m_B = b;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span><br><span class="line">	//void operator&lt;&lt;(Person&amp; p)&#123;</span><br><span class="line">	//&#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">	int m_A;</span><br><span class="line">	int m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//全局函数实现左移重载</span><br><span class="line">//ostream对象只能有一个</span><br><span class="line">ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) &#123; </span><br><span class="line">    		//ostream是标准的输出流，全局只能有一个，所以用引用引用的方式</span><br><span class="line">	out &lt;&lt; &quot;a:&quot; &lt;&lt; p.m_A &lt;&lt; &quot; b:&quot; &lt;&lt; p.m_B;</span><br><span class="line">	return out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test() &#123;</span><br><span class="line"></span><br><span class="line">	Person p1(10, 20);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; p1 &lt;&lt; &quot;hello world&quot; &lt;&lt; endl; //链式编程</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">	test();</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="运算符重载的坑"><a href="#运算符重载的坑" class="headerlink" title="运算符重载的坑"></a>运算符重载的坑</h2><h3 id="意外的类型转换"><a href="#意外的类型转换" class="headerlink" title="意外的类型转换"></a>意外的类型转换</h3><p>在编程实践中,对于类型转换和拷贝构造函数有可能发生了意外的隐式转换,导致bug,所以最好是加上explict关键字,告诉编译器不要做隐式转换</p>
<h3 id="重载双目运算符不满足交换律"><a href="#重载双目运算符不满足交换律" class="headerlink" title="重载双目运算符不满足交换律"></a>重载双目运算符不满足交换律</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using	namespace	std;</span><br><span class="line">class MyClass2</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">public:</span><br><span class="line">	MyClass2(int i)&#123; n = i; &#125;</span><br><span class="line">	MyClass2 operator +(int a)&#123; n+=a; return n; &#125;</span><br><span class="line">	void display()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; &quot;n=&quot; &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">    friend  MyClass2 operator +(MyClass2 a, int  b)&#123; </span><br><span class="line">       a.n += b;</span><br><span class="line">       return a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	MyClass2 A(5), B(5);</span><br><span class="line">    A = 5 + A;// 会报错</span><br><span class="line">	A.display();</span><br><span class="line">	B.display();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例子中会无法通过编译,因为双目运算符成员函数左边必须是对象，友元重载必须参数类型要匹配(按照前面双目运算符的等价函数调用来理解)。这就导致的加法不满足交换律.</p>
<h3 id="过多的转换函数导致的二义性"><a href="#过多的转换函数导致的二义性" class="headerlink" title="过多的转换函数导致的二义性"></a>过多的转换函数导致的二义性</h3><p>假定Stock有形参为double的拷贝构造函数,并且重载了Stock类之间的加法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Stock a(1.0);</span><br><span class="line">double b = 2.0;</span><br><span class="line">Stock total;</span><br><span class="line">total = a + b;// 将b转成Stock，再相加</span><br></pre></td></tr></table></figure>
<p>如果此时还又定义了Stock到double的转换函数,那么最后一行将不知道是将a转成double还是将b转成Stock,导致歧义</p>
<h1 id="测试代码见"><a href="#测试代码见" class="headerlink" title="测试代码见"></a>测试代码见</h1><p><a href="https://github.com/dingweiqings/study/tree/master/cpp_study/src/operator">我的github</a></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol>
<li>C++ Prime Plus</li>
<li><a href="https://cloud.tencent.com/developer/article/1688289">C++重载运算符实例</a></li>
</ol>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>文件系统源码</title>
    <url>//2023/09/19/linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>mysql查询源码</title>
    <url>//2023/09/19/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E6%9F%A5%E8%AF%A2%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>elasticsearch查询</title>
    <url>//2023/09/19/%E5%A4%A7%E6%95%B0%E6%8D%AE/elasticsearch/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>系统编程</title>
    <url>//2023/09/19/linux/linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>spark</title>
    <url>//2023/09/19/%E5%A4%A7%E6%95%B0%E6%8D%AE/spark/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>x86汇编</title>
    <url>//2023/09/19/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/x86%E6%B1%87%E7%BC%96/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>std库</title>
    <url>//2023/09/20/C++/std/</url>
    <content><![CDATA[<p>正文见我的有道云笔记<br><a href="https://note.youdao.com/s/TzGJhYmG">https://note.youdao.com/s/TzGJhYmG</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>std库 模板</tag>
      </tags>
  </entry>
  <entry>
    <title>gcc的虚函数表</title>
    <url>//2023/09/25/C++/gcc%E7%9A%84%E8%99%9A%E5%87%BD%E6%95%B0%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="虚函数表"><a href="#虚函数表" class="headerlink" title="虚函数表"></a>虚函数表</h1><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h1 id="gcc查看虚函数表"><a href="#gcc查看虚函数表" class="headerlink" title="gcc查看虚函数表"></a>gcc查看虚函数表</h1><h1 id="继承结构可视化"><a href="#继承结构可视化" class="headerlink" title="继承结构可视化"></a>继承结构可视化</h1><p><a href="https://github.com/bingseclab/VirtAnalyzer/blob/master/README.md">https://github.com/bingseclab/VirtAnalyzer/blob/master/README.md</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++ 虚函数 编译器</tag>
      </tags>
  </entry>
  <entry>
    <title>yacc使用</title>
    <url>//2023/09/25/%E7%BC%96%E8%AF%91%E5%99%A8/yacc/</url>
    <content><![CDATA[<h1 id="简单介绍下编译原理"><a href="#简单介绍下编译原理" class="headerlink" title="简单介绍下编译原理"></a>简单介绍下编译原理</h1><p>词法分析-&gt;语法分析-&gt;生成中间代码-&gt;机器无关的优化-&gt;生成汇编(机器相关的优化)-&gt;交给汇编器生成机器码<br>编译原理我当时看完了龙书+斯坦福的编译器公开课之后,对其中细节还是一知半解,当时就暂时先放下了.最开始的递归下降,nfa,dfa直接给我劝退了。<br>AST啥的也理解不透彻.</p>
<h1 id="词法分析和语法分析框架"><a href="#词法分析和语法分析框架" class="headerlink" title="词法分析和语法分析框架"></a>词法分析和语法分析框架</h1><p>lex和yacc是unix下的词法&#x2F;语法分析框架,<br>flex&#x2F;bison是词法&#x2F;语法分析框架<br>bison和yacc实际上用途是同一种，不过在不同平台下,yacc已经成为语法分析框架的代名词。下文统一使用lex&#x2F;yacc</p>
<h1 id="Lex和YACC内部是如何工作的？"><a href="#Lex和YACC内部是如何工作的？" class="headerlink" title="Lex和YACC内部是如何工作的？"></a>Lex和YACC内部是如何工作的？</h1><p>main -&gt;yyparse() -&gt; yylex()<br>yylex 会读取在yyin这个变量中的文件(没有则默认是stdin), yylex不断解析输入流,yyparse不断推导产生式并执行相应动作(在语法文件中定义),直到结束.<br><strong>注意：所以现在语法推导和lex解析算法大多都是O(N),只扫描一遍输入流不回退</strong></p>
<h1 id="lex"><a href="#lex" class="headerlink" title="lex"></a>lex</h1><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p>这个框架实际上会根据给定的配置,来解析字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">%&#125;</span><br><span class="line">%%</span><br><span class="line">stop       printf(“Stop command received\n”);</span><br><span class="line">start      printf(“Start command received\n”);</span><br><span class="line">%%</span><br></pre></td></tr></table></figure>
<p>第一部分，位于%{和%}对之间直接包含了输出程序(stdio.h).我们需要这个程序，因为使用了printf函数，它在stdio.h中定义.</p>
<p>第二部分用’%%’分割开来，所以第二行起始于’stop’，一旦在输入参数中遇到了’stop’，接下来的那一行(printf()调用)将被执行.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">匹配的字符串名称 执行动作</span><br></pre></td></tr></table></figure>
<p>我们这里是固定字符串stop,start</p>
<p>除此之外，还有’start’，其跟stop的行为差不多.<br>执行以下命令：<br>编译时，我们增加『-ll』编译选项，因为libl会提供main函数.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flex helloworld.lex</span><br><span class="line">gcc lex.yy.c –o example –ll</span><br></pre></td></tr></table></figure>
<p><img src="/img/hello-lex.png" alt="输出"></p>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">[0123456789]+     printf(“NUMBER\n”);</span><br><span class="line">[a-zA-Z][a-zA-Z0-9]*  printf(“word\n”);</span><br></pre></td></tr></table></figure>
<p>执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flex regex.lex</span><br><span class="line">gcc lex.yy.c –o example –ll</span><br></pre></td></tr></table></figure>
<p><img src="/img/regex.png" alt="输出"></p>
<h2 id="lex中的函数和变量"><a href="#lex中的函数和变量" class="headerlink" title="lex中的函数和变量"></a>lex中的函数和变量</h2><ul>
<li>ytext char * 当前匹配的字符串</li>
<li>yleng int 当前匹配的字符串长度</li>
<li>yin FILE * lex当前的解析文件，默认为标准输出</li>
<li>yout FILE * lex解析后的输出文件，默认为标准输入</li>
<li>ylineno int 当前的行数信息</li>
<li>宏<br>  CHO #define ECHO fwrite(yytext, yyleng, 1, yyout) 也是未匹配字符的默认动作</li>
<li>int yylex(void) 调用Lex进行词法分析</li>
<li>int yywrap(void) 在文件(或输入)的末尾调用。如果函数的返回值是1，就停止解析。 因此它可以用来解析多个文件。代码可以写在第三段，这样可以解析多个文件。 方法是使用 yyin 文件指针指向不同的文件，直到所有的文件都被解析。最后，yywrap() 可以返回1来表示解析的结束。</li>
</ul>
<h1 id="yacc"><a href="#yacc" class="headerlink" title="yacc"></a>yacc</h1><p>YACC可以解析输入流中的标识符(token)，这就描述了YACC和LEX的关系，YACC并不知道『输入流』为何物，它需要事先就将输入流预加工成标识符，我们也可以自己手工写一个Tokenizer.</p>
<h2 id="yacc中的函数"><a href="#yacc中的函数" class="headerlink" title="yacc中的函数"></a>yacc中的函数</h2><ul>
<li>yyerror()在YACC发现一个错误的时候被调用，我们只是简单的输出错误信息.</li>
<li>yywrap()函数用于不断的从一个文件中读取数据，当遇到EOF时，你可以再输入一个文件，然后返回0，你也可以使得其返回1，暗示着输入结束</li>
<li>这里有一个main()函数，它基本什么也不做，只是调用一些函数.可以单独定义也可以就放在grammer.y中</li>
<li>yyparse() 会解析输入流中的token,并结合产生式推导</li>
</ul>
<h2 id="产生式"><a href="#产生式" class="headerlink" title="产生式"></a>产生式</h2><p>编译原理中的表达语法的上下文无关文法,确定了字符串的生成变换规则.这里需要将固定的语法拆分成字符串变换规则来理解,如果一个字符串没办法从终结符号结合变换规则得到，则该字符串不符合语法,需要抛出sytnax error.常见的语法分析算法有递归下降,LALR等</p>
<h1 id="实例-实现一个固定语法的温度控制器"><a href="#实例-实现一个固定语法的温度控制器" class="headerlink" title="实例(实现一个固定语法的温度控制器)"></a>实例(实现一个固定语法的温度控制器)</h1><p>我们希望实现下面的功能,如果用户输入heat on 就打开温度控制器,输入heat off就关闭温度控制器,用户还可以通过target temperature set xxx来设定温度值</p>
<h2 id="lexer"><a href="#lexer" class="headerlink" title="lexer"></a>lexer</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;y.tab.h&quot;</span><br><span class="line">%&#125;</span><br><span class="line">%%</span><br><span class="line">[0-9]+         &#123; yylval = atoi(yytext); return NUMBER;&#125;</span><br><span class="line">heat           return TOKHEAT;</span><br><span class="line">on|off         return STATE;</span><br><span class="line">target         return TOKTARGET;</span><br><span class="line">temperature    return TOKTEMPERATURE;</span><br><span class="line">\n             /* ignore end of line */;</span><br><span class="line">[ \t]+         /* ignore whitespace */</span><br><span class="line">%%</span><br></pre></td></tr></table></figure>
<p>lex根据正则来确定TOKEN,这个也是在yacc产生式中的终结符</p>
<h2 id="grammer"><a href="#grammer" class="headerlink" title="grammer"></a>grammer</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">void yywrap()</span><br><span class="line">&#123;</span><br><span class="line">    return  1;</span><br><span class="line">&#125;</span><br><span class="line">void yyerror(char * errmsg)&#123;</span><br><span class="line">    printf(&quot;%s\n&quot;,errmsg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    yyparse();</span><br><span class="line">&#125;</span><br><span class="line">%&#125;</span><br><span class="line">//这里需要和lex中返回的token一致</span><br><span class="line">%token  NUMBER TOKHEAT STATE TOKTARGET TOKTEMPERATURE</span><br><span class="line">%%</span><br><span class="line">commands: /* empty */</span><br><span class="line">    | commands command</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">command: heat_switch</span><br><span class="line">    | target_set</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">heat_switch:</span><br><span class="line">    TOKHEAT STATE</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;\tHeat turned on or off\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">target_set:</span><br><span class="line">    TOKTARGET TOKTEMPERATURE NUMBER</span><br><span class="line">    &#123;</span><br><span class="line">        //展示区别,这里给输入参数+5</span><br><span class="line">        printf(&quot;\tTemperature set %d\n&quot;,$3 + 5);</span><br><span class="line">    &#125;</span><br><span class="line">;</span><br><span class="line">%%</span><br></pre></td></tr></table></figure>

<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>对于设定的温度,我为了展示有运算逻辑而不是直接拷贝字符串,我特意对参数做了一个加5的逻辑<br>执行下列命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flex heat.lex</span><br><span class="line">bison -d heat-grammer.y  --file-prefix y</span><br><span class="line">gcc y.tab.c lex.yy.c</span><br></pre></td></tr></table></figure>
<p><img src="/img/heat-output.png" alt="温度控制"></p>
<h2 id="yacc中的union类型-这种是实际工程中才使用的"><a href="#yacc中的union类型-这种是实际工程中才使用的" class="headerlink" title="yacc中的union类型(这种是实际工程中才使用的)"></a>yacc中的union类型(这种是实际工程中才使用的)</h2><h3 id="温度控制器的新语法"><a href="#温度控制器的新语法" class="headerlink" title="温度控制器的新语法"></a>温度控制器的新语法</h3><p>用下面方式控制，先选择heater，再设置温度<br>heater mainbuilding</p>
<pre><code>Selected ‘mainbuilding’ heater
</code></pre>
<p>Target temperature 23</p>
<pre><code>‘mainbuilding’ heater target temperature now 23
</code></pre>
<h3 id="yacc中的变量"><a href="#yacc中的变量" class="headerlink" title="yacc中的变量"></a>yacc中的变量</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">extern int yydebug = 1;</span><br><span class="line">char * heater=NULL;</span><br><span class="line">void yywrap()</span><br><span class="line">&#123;</span><br><span class="line">    return  1;</span><br><span class="line">&#125;</span><br><span class="line">void yyerror(char * errmsg)&#123;</span><br><span class="line">    printf(&quot;%s\n&quot;,errmsg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    yyparse();</span><br><span class="line">&#125;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%token  TOKHEAT TOKTARGET TOKTEMPERATURE  TOKHEATER </span><br><span class="line">%union</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    int number;</span><br><span class="line"></span><br><span class="line">    char *string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%token &lt;number&gt; STATE</span><br><span class="line"></span><br><span class="line">%token &lt;number&gt; NUMBER</span><br><span class="line"></span><br><span class="line">%token &lt;string&gt; WORD</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">commands: /* empty */</span><br><span class="line">    | commands command</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">command: heat_switch</span><br><span class="line">    | target_set | heater_select</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">heat_switch:</span><br><span class="line">    TOKHEAT STATE</span><br><span class="line">    &#123;</span><br><span class="line">         if ($2)</span><br><span class="line">            printf(&quot;\tHeat turned on\n&quot;);</span><br><span class="line">         else</span><br><span class="line">            printf(&quot;\tHeat turned off\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">target_set:</span><br><span class="line">    TOKTARGET TOKTEMPERATURE NUMBER</span><br><span class="line">    &#123;</span><br><span class="line">        //展示区别,这里给输入参数+5</span><br><span class="line">        printf(&quot;\tHeater &#x27;%s&#x27; temperature set to %d\n&quot;, heater, $3+5);</span><br><span class="line">    &#125;</span><br><span class="line">;</span><br><span class="line">heater_select :</span><br><span class="line"></span><br><span class="line">    TOKHEATER WORD</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">       printf(&quot;\tSelected heater ‘%s’\n&quot;, $2);</span><br><span class="line"></span><br><span class="line">       heater = $2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line">%%</span><br></pre></td></tr></table></figure>
<p>这次我们在command产生式增加了heater_select,并且定义了一个全局变量来接收选择的温度控制器.token处，我们定义了一个union变量,用于处理输入中不同的数据类型.此处表示yylval是一个union类型,可用来处理不同的数据类型</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;y.tab.h&quot;</span><br><span class="line">%&#125;</span><br><span class="line">%%</span><br><span class="line">[0-9]+         &#123; yylval.number = atoi(yytext); return NUMBER;&#125;</span><br><span class="line">heater         return TOKHEATER;</span><br><span class="line">heat           return TOKHEAT;</span><br><span class="line">on|off         &#123; yylval.number = !strcmp(yytext,  &quot;on&quot;); return STATE; &#125;</span><br><span class="line">target         return TOKTARGET;</span><br><span class="line">temperature    return TOKTEMPERATURE;</span><br><span class="line">[a-z0-9]+     yylval.string = strdup(yytext); return WORD;</span><br><span class="line">\n             /* ignore end of line */;</span><br><span class="line">[ \t]+         /* ignore whitespace */</span><br><span class="line">%%</span><br></pre></td></tr></table></figure>
<p>细心的同学可能已经发现了,这次对于yylval的赋值已经是具体到成员了</p>
<h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>对于设定的温度,我为了展示有运算逻辑而不是直接拷贝字符串,我特意对参数做了一个加5的逻辑<br><img src="/img/yacc-with-union.png" alt="输出"></p>
<h1 id="yacc-debug"><a href="#yacc-debug" class="headerlink" title="yacc debug"></a>yacc debug</h1><p>当调试你的语法时，在YACC命令行中添加—debug和—verbose选项，在你的C文件头中添加以下语句：<br>int yydebug &#x3D; 1;这将生成一个y.output文件，其中说明了所创建的那个状态机.<br>可以开启debug语法信息,详细查看yacc状态机和根据产生式推导的过程.这里我mark一下,以便后续自己查阅.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-t(--debug) -v</span><br><span class="line">bison -t -v -d heat-grammer.y -b y </span><br></pre></td></tr></table></figure>
<h1 id="测试代码见"><a href="#测试代码见" class="headerlink" title="测试代码见"></a>测试代码见</h1><p><a href="https://github.com/dingweiqings/study/tree/master/compiler_study/src/yacc">我的github代码</a></p>
<h1 id="推广"><a href="#推广" class="headerlink" title="推广"></a>推广</h1><p>我们发现lex和yacc可以用来处理有固定语法的字符串,那么我们可以用其来解析配置文件,解析sql,解析json等等.好啦,现在你可以去看mysql和pg的sql解析啦,为学到新知识开心.<br><a href="https://github.com/mysql/mysql-server/blob/8.0/sql/sql_yacc.yy">mysql yacc</a><br><a href="https://github.com/postgres/postgres/blob/master/src/backend/parser/gram.y">Postgres yacc</a></p>
<h1 id="更深入的学习"><a href="#更深入的学习" class="headerlink" title="更深入的学习"></a>更深入的学习</h1><p><a href="https://pku-minic.github.io/online-doc/#/lv9p-reincarnation/ssa-form">北大编译实践</a><br><a href="https://blog.ginshio.org/2022/flex_and_bison/#gnu-bison">lex和yacc内核</a></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol>
<li><a href="https://cnblogs.com/itech/archive/2012/03/04/2375746.html">flex和bison</a></li>
<li><a href="https://blog.csdn.net/u014015972/article/details/51480680">flex和bison实现计算器</a></li>
<li><a href="http://home.ustc.edu.cn/~guoxing/ebooks/flex%E4%B8%8Ebison%E4%B8%AD%E6%96%87%E7%89%88.pdf">flex和bison中文版电子书</a></li>
</ol>
]]></content>
      <categories>
        <category>编译器</category>
      </categories>
      <tags>
        <tag>yacc</tag>
      </tags>
  </entry>
  <entry>
    <title>goyacc</title>
    <url>//2023/09/19/%E7%BC%96%E8%AF%91%E5%99%A8/goyacc%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    <content><![CDATA[<h1 id="简单介绍下编译原理"><a href="#简单介绍下编译原理" class="headerlink" title="简单介绍下编译原理"></a>简单介绍下编译原理</h1><p>词法分析-&gt;语法分析-&gt;生成中间代码-&gt;机器无关的优化-&gt;生成汇编(机器相关的优化)-&gt;交给汇编器生成机器码<br>编译原理我当时看完了龙书+斯坦福的编译器公开课之后,对其中细节还是一知半解,当时就暂时先放下了.最开始的递归下降,nfa,dfa直接给我劝退了。<br>AST啥的也理解不透彻.</p>
<h1 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h1><h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>解析字符串流,确定一个个的token,比如在c语言中,确定是if,while这些关键字还是变量名,运算符等.最终会生成符号表。<br>语言中关键字：这些关键字会被保存在一种表中，在解析字符流的时候，如果碰到关键字则直接保留。</p>
<h2 id="词法框架"><a href="#词法框架" class="headerlink" title="词法框架"></a>词法框架</h2><p>根据正则表达式来定义某种特定token的规则,在解析字符串流的时候，根据正则来判断属于哪种token</p>
<h2 id="常见的词法框架-x2F-工具"><a href="#常见的词法框架-x2F-工具" class="headerlink" title="常见的词法框架&#x2F;工具"></a>常见的词法框架&#x2F;工具</h2><p>lex&#x2F;flex,是通过正则表达式和自定义解析字符串综合工作的</p>
<h1 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h1><p>主要在于如何表达语法规则和检验语法规则.</p>
<h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><p>编译器大佬提出了一种文法，只关注字符串的变换.并定义终结符号和非终结符号的概念.非终结符号则可以继续产生新符号,从而用字符串实体表达出了语言的语法规则.非终结符号到另外一个符号串叫做产生式.</p>
<h2 id="产生式"><a href="#产生式" class="headerlink" title="产生式"></a>产生式</h2><p>比如程序一开始会有一个非终结符号S,对于C语言这个语法来说,会有下面的产生式.下面给出部分产生式做说明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S -&gt; void main()&#123;B&#125;</span><br><span class="line">B -&gt; Y;</span><br><span class="line">Y -&gt; Y;STATEMENT | e</span><br><span class="line">STATEMENT -&gt; D | A | BLOCK</span><br><span class="line">D -&gt; TYPE id | TYPE* id</span><br><span class="line">BLOCK -&gt; IF(C)&#123;B&#125; ELSE&#123;B&#125; | while(C)&#123;B&#125;</span><br><span class="line">A -&gt; id + id | id -id | id * id | id /id </span><br></pre></td></tr></table></figure>
<p>解释一下上面的产生式,id和e,type这些是终结符.<br>第1行: S是非终结符号,可以变成main函数,里面是函数体<br>第2行: 表示函数体可以是分号组成的各种语句<br>第3行: 表示语句之间是可以不断拼接的,从而理论上可写出无限长度的程序<br>第4行：表示语句可以有声明语句,算术运算和语句块<br>第5行: 表示声明语句只能是类型名空格+标志符组成<br>第6行: 表示语句块可以有条件块和循环块<br>第7行: 表示算数运算可以有加减乘除</p>
<h2 id="语法分析的实现"><a href="#语法分析的实现" class="headerlink" title="语法分析的实现"></a>语法分析的实现</h2><p>给定一组字符串可以是递归去判断,看最终会不会达到终结符,然后比对终结符是否和字符串中的相同.但在实际中采用的是更有效率的DFA表格,预先对产生式处理,然后可以对扫一遍字符串就可以判定是否合法,并构建出语法树</p>
<h2 id="语法树"><a href="#语法树" class="headerlink" title="语法树"></a>语法树</h2><p>TODO,这块我目前还没搞懂</p>
<h1 id="语法分析框架"><a href="#语法分析框架" class="headerlink" title="语法分析框架"></a>语法分析框架</h1><p>好在大佬们已经写出来好的工具来给咱们使用了.yacc是语法分析的一种实现，根据用户定义的语法规则，做对应的动作.所有的查询引擎都有这个模块,比如mysql,prometheus.根据不同语言的yacc(c语言),javacc还有goyacc</p>
<h1 id="goyacc做一个简单的计算器"><a href="#goyacc做一个简单的计算器" class="headerlink" title="goyacc做一个简单的计算器"></a>goyacc做一个简单的计算器</h1><p>我们来2步走，主要是这2个方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type exprLexer interface &#123;</span><br><span class="line">	Lex(lval *exprSymType) int</span><br><span class="line">	Error(s string)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type exprParser interface &#123;</span><br><span class="line">	Parse(exprLexer) int</span><br><span class="line">	Lookahead() int</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>expr函数前缀,goyacc中可以自定义. 在自己的app中可以直接调用Parser来分析。但要提供lex的实现.下面实例中就可以看到</p>
<h2 id="分析词法"><a href="#分析词法" class="headerlink" title="分析词法"></a>分析词法</h2><p>细心的同学就会发现,这里实际上实现了上面lexer的2个接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (x *exprLex) Lex(yylval *exprSymType) int &#123;</span><br><span class="line">	for &#123;</span><br><span class="line">		c, _, err := x.input.ReadRune()</span><br><span class="line">		if err != nil &#123;</span><br><span class="line">			return eof</span><br><span class="line">		&#125;</span><br><span class="line">		switch c &#123;</span><br><span class="line">		case &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;:</span><br><span class="line">			return x.num(c, yylval)</span><br><span class="line">		case &#x27;+&#x27;, &#x27;-&#x27;, &#x27;*&#x27;, &#x27;/&#x27;, &#x27;(&#x27;, &#x27;)&#x27;:</span><br><span class="line">			return int(c)</span><br><span class="line">		case &#x27;×&#x27;:</span><br><span class="line">			return &#x27;*&#x27;</span><br><span class="line">		case &#x27;÷&#x27;:</span><br><span class="line">			return &#x27;/&#x27;</span><br><span class="line"></span><br><span class="line">		case &#x27; &#x27;, &#x27;\t&#x27;, &#x27;\n&#x27;, &#x27;\r&#x27;:</span><br><span class="line">		default:</span><br><span class="line">			log.Printf(&quot;unrecognized character %q&quot;, c)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Lex a number.</span><br><span class="line">func (x *exprLex) num(c rune, yylval *exprSymType) int &#123;</span><br><span class="line">	var b bytes.Buffer</span><br><span class="line">	b.WriteRune(c)</span><br><span class="line">L:</span><br><span class="line">	for &#123;</span><br><span class="line">		c, _, err := x.input.ReadRune()</span><br><span class="line">		if err != nil &#123;</span><br><span class="line">			return eof</span><br><span class="line">		&#125;</span><br><span class="line">		switch c &#123;</span><br><span class="line">		case &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;.&#x27;, &#x27;e&#x27;, &#x27;E&#x27;:</span><br><span class="line">			b.WriteRune(c)</span><br><span class="line">		default:</span><br><span class="line">			_ = x.input.UnreadRune()</span><br><span class="line">			break L</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	yylval.num = &amp;big.Float&#123;&#125;</span><br><span class="line">	_, ok := yylval.num.SetString(b.String())</span><br><span class="line">	if !ok &#123;</span><br><span class="line">		log.Printf(&quot;bad number %q&quot;, b.String())</span><br><span class="line">		return eof</span><br><span class="line">	&#125;</span><br><span class="line">	return NUM</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (x *exprLex) Error(s string) &#123;</span><br><span class="line">	log.Println(&quot;parse error: &quot;, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="分析语法"><a href="#分析语法" class="headerlink" title="分析语法"></a>分析语法</h2><h3 id="产生式-1"><a href="#产生式-1" class="headerlink" title="产生式"></a>产生式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"></span><br><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;math/big&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%union &#123;</span><br><span class="line">    num *big.Float</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%type &lt;num&gt; expr expr1 expr2 expr3 //  定义在后面的符号比定义在前面的符号具有更好的优先级</span><br><span class="line"></span><br><span class="line">%token &#x27;+&#x27; &#x27;-&#x27; &#x27;*&#x27; &#x27;/&#x27; &#x27;(&#x27; &#x27;)&#x27;</span><br><span class="line"></span><br><span class="line">%token	&lt;num&gt; NUM</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">top:</span><br><span class="line">expr</span><br><span class="line">&#123;</span><br><span class="line">    if $1.IsInt() &#123;</span><br><span class="line">	fmt.Println($1.String())</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        fmt.Println($1.String())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expr:</span><br><span class="line">expr1</span><br><span class="line">&#123;&#125;</span><br><span class="line">|</span><br><span class="line">&#x27;+&#x27; expr</span><br><span class="line">&#123;</span><br><span class="line">    $$ = $2</span><br><span class="line">&#125;</span><br><span class="line">|</span><br><span class="line">&#x27;-&#x27; expr</span><br><span class="line">&#123;</span><br><span class="line">    $$ = $2.Neg($2)</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">expr1:</span><br><span class="line">expr2</span><br><span class="line">&#123;&#125;</span><br><span class="line">|</span><br><span class="line">expr1 &#x27;+&#x27; expr2</span><br><span class="line">&#123;</span><br><span class="line">    $$ = $1.Add($1, $3)</span><br><span class="line">&#125;</span><br><span class="line">|</span><br><span class="line">expr1 &#x27;-&#x27; expr2</span><br><span class="line">&#123;</span><br><span class="line">    $$ = $1.Sub($1, $3)</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">expr2:</span><br><span class="line">expr3</span><br><span class="line">&#123;&#125;</span><br><span class="line">|</span><br><span class="line">expr2 &#x27;*&#x27; expr3</span><br><span class="line">&#123;</span><br><span class="line">    $$ = $1.Mul($1, $3)</span><br><span class="line">&#125;</span><br><span class="line">|</span><br><span class="line">expr2 &#x27;/&#x27; expr3</span><br><span class="line">&#123;</span><br><span class="line">    $$ = $1.Quo($1, $3)</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">expr3:</span><br><span class="line">NUM</span><br><span class="line">|</span><br><span class="line">&#x27;(&#x27; expr &#x27;)&#x27;</span><br><span class="line">&#123;</span><br><span class="line">    $$ = $2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="应用中如何调用分析器"><a href="#应用中如何调用分析器" class="headerlink" title="应用中如何调用分析器"></a>应用中如何调用分析器</h2><p>读取命令行的输入,并调用分析器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">	in := bufio.NewReader(os.Stdin)</span><br><span class="line">	a := big.Float&#123;&#125;</span><br><span class="line">	a.String()</span><br><span class="line">	for &#123;</span><br><span class="line">		if _, err := os.Stdout.WriteString(&quot;&gt; &quot;); err != nil &#123;</span><br><span class="line">			log.Println(&quot;WriteString: &quot;, err)</span><br><span class="line">		&#125;</span><br><span class="line">		line, err := in.ReadBytes(&#x27;\n&#x27;)</span><br><span class="line">		if err == io.EOF &#123;</span><br><span class="line">			return</span><br><span class="line">		&#125;</span><br><span class="line">		if err != nil &#123;</span><br><span class="line">			log.Fatalf(&quot;ReadBytes: %s&quot;, err)</span><br><span class="line">		&#125;</span><br><span class="line">    //调用分析器</span><br><span class="line">		exprParse(newExprLex(line))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>go install golang.org&#x2F;x&#x2F;tools&#x2F;cmd&#x2F;goyacc@latest</p>
<h3 id="goyacc使用"><a href="#goyacc使用" class="headerlink" title="goyacc使用"></a>goyacc使用</h3><p> Usage of goyacc:<br>  -l    disable line directives<br>  -o string<br>        parser output (default “y.go”)<br>  -p string<br>        name prefix to use in generated code (default “yy”)<br>  -v string<br>        create parsing tables (default “y.output”)<br>会根据你的语法规则(.y后缀的)生成.go文件.  -o指定文件的名称 -p 指定生成parse函数前缀,默认是叫yyParse,以供外部调用<br>goyacc -o expr.go -p expr expr.y</p>
<h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>go build expr.go lexer.go main.go </p>
<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p><img src="/img/caculator.png" alt="运行结果"></p>
<h1 id="goyacc-做json-parser"><a href="#goyacc-做json-parser" class="headerlink" title="goyacc 做json parser"></a>goyacc 做json parser</h1><p>最主要是整理出json的产生式,然后理解下yacc框架下的整体工作流程，就可以搞出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">package jsonparser</span><br><span class="line"></span><br><span class="line">type pair struct &#123;</span><br><span class="line">  key string</span><br><span class="line">  val interface&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func setResult(l yyLexer, v map[string]interface&#123;&#125;) &#123;</span><br><span class="line">  l.(*lex).result = v</span><br><span class="line">&#125;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%union&#123;</span><br><span class="line">  obj map[string]interface&#123;&#125;</span><br><span class="line">  list []interface&#123;&#125;</span><br><span class="line">  pair pair</span><br><span class="line">  val interface&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%token LexError</span><br><span class="line">%token &lt;val&gt; String Number Literal</span><br><span class="line"></span><br><span class="line">%type &lt;obj&gt; object members</span><br><span class="line">%type &lt;pair&gt; pair</span><br><span class="line">%type &lt;val&gt; array</span><br><span class="line">%type &lt;list&gt; elements</span><br><span class="line">%type &lt;val&gt; value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%start object</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">object:</span><br><span class="line">&#x27;&#123;&#x27; members &#x27;&#125;&#x27;</span><br><span class="line">&#123;</span><br><span class="line">	$$=$2</span><br><span class="line">	setResult(yylex, $$)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">members:</span><br><span class="line">&#123;</span><br><span class="line">	$$ = map[string]interface&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">| pair</span><br><span class="line">&#123;</span><br><span class="line">	$$ = map[string]interface&#123;&#125;&#123;$1.key: $1.val&#125;</span><br><span class="line">&#125;</span><br><span class="line">| members &#x27;,&#x27; pair</span><br><span class="line">&#123;</span><br><span class="line">	$1[$3.key] = $3.val</span><br><span class="line">	$$ = $1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pair:</span><br><span class="line">String &#x27;:&#x27; value</span><br><span class="line">&#123;</span><br><span class="line">	$$ = pair&#123;key: $1.(string), val: $3&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array: &#x27;[&#x27; elements &#x27;]&#x27;</span><br><span class="line">&#123;</span><br><span class="line">	$$ = $2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elements:</span><br><span class="line">&#123;</span><br><span class="line">	$$=[]interface&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">| value</span><br><span class="line">&#123;</span><br><span class="line">	$$=[]interface&#123;&#125;&#123;$1&#125;</span><br><span class="line">&#125;</span><br><span class="line">|</span><br><span class="line">elements &#x27;,&#x27; value</span><br><span class="line">&#123;</span><br><span class="line">	$$=append($1, $3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">value:</span><br><span class="line">  String</span><br><span class="line">| Number</span><br><span class="line">| Literal</span><br><span class="line">| object</span><br><span class="line">  &#123;</span><br><span class="line">    $$ = $1</span><br><span class="line">  &#125;</span><br><span class="line">| array</span><br></pre></td></tr></table></figure>
<h1 id="测试代码见"><a href="#测试代码见" class="headerlink" title="测试代码见"></a>测试代码见</h1><p><a href="https://github.com/dingweiqings/study/tree/master/goyacc-study">https://github.com/dingweiqings/study/tree/master/goyacc-study</a></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol>
<li>龙书 编译原理</li>
<li><a href="/2023/09/25/%E7%BC%96%E8%AF%91%E5%99%A8/yacc/">yacc使用</a></li>
</ol>
]]></content>
      <categories>
        <category>编译器</category>
      </categories>
      <tags>
        <tag>yacc</tag>
      </tags>
  </entry>
</search>
